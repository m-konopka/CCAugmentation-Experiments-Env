import os
from easydict import EasyDict as edict
import time
import torch

# init
__C = edict()
cfg = __C

#------------------------------TRAIN------------------------
__C.SEED = 3035 # random seed,  for reporduction
__C.DATASET = 'SHHB' # dataset selection: GCC, SHHA, SHHB, UCF50, UCFQNRF, WE

if __C.DATASET == 'UCF50':# only for UCF50
	from datasets.UCF50.setting import cfg_data
	__C.VAL_INDEX = cfg_data.VAL_INDEX 

if __C.DATASET == 'GCC':# only for GCC
	from datasets.GCC.setting import cfg_data
	__C.VAL_MODE = cfg_data.VAL_MODE 


__C.NET = 'CSRNet' # net selection: MCNN, VGG, VGG_DECODER, CSRNet

__C.PRE_GCC = False # use the pretrained model on GCC dataset
__C.PRE_GCC_MODEL = '' # path to model

__C.RESUME = False # contine training
__C.RESUME_PATH = './exp/11-26_17-34_SHHB_SANet_0.0001_[noAug]/latest_state.pth' # 

__C.GPU_ID = [0] # sigle gpu: [0], [1] ...; multi gpus: [0,1]

# learning rate settings
__C.LR = 1e-5 # learning rate
__C.LR_DECAY = 0.99 # decay rate
__C.LR_DECAY_START = 100 # when training epoch is more than it, the learning rate will be begin to decay
__C.NUM_EPOCH_LR_DECAY = 1 # decay frequency
__C.MAX_EPOCH = 250

# print 
__C.PRINT_FREQ = 10

now = time.strftime("%m-%d_%H-%M", time.localtime())

__C.EXP_NAME = now \
			 + '_' + __C.DATASET \
             + '_' + __C.NET \
             + '_' + str(__C.LR)

if __C.DATASET == 'UCF50':
	__C.EXP_NAME += '_' + str(__C.VAL_INDEX)	

if __C.DATASET == 'GCC':
	__C.EXP_NAME += '_' + __C.VAL_MODE	

__C.EXP_PATH = './exp' # the path of logs, checkpoints, and current codes


#------------------------------VAL------------------------
__C.VAL_DENSE_START = 50
__C.VAL_FREQ = 5 # Before __C.VAL_DENSE_START epoches, the freq is set as __C.VAL_FREQ

#------------------------------VIS------------------------
__C.VISIBLE_NUM_IMGS = 1 #  must be 1 for training images with the different sizes



#================================================================================
#================================================================================
#================================================================================  



===============+++++++++++++++===============

all_ep_001_mae_4.35_mse_7.90
    [mae 4.35 mse 7.90], [val loss 0.0071]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_006_mae_1.25_mse_2.26
    [mae 1.25 mse 2.26], [val loss 0.0047]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_057_mae_0.71_mse_1.03
    [mae 0.71 mse 1.03], [val loss 0.0016]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_080_mae_0.69_mse_0.91
    [mae 0.69 mse 0.91], [val loss 0.0035]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_191_mae_0.63_mse_1.28
    [mae 0.63 mse 1.28], [val loss 0.0027]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_192_mae_0.62_mse_0.96
    [mae 0.62 mse 0.96], [val loss 0.0030]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_199_mae_0.54_mse_0.82
    [mae 0.54 mse 0.82], [val loss 0.0029]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_215_mae_0.50_mse_0.83
    [mae 0.50 mse 0.83], [val loss 0.0019]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_241_mae_0.38_mse_0.60
    [mae 0.38 mse 0.60], [val loss 0.0022]
===============+++++++++++++++===============

