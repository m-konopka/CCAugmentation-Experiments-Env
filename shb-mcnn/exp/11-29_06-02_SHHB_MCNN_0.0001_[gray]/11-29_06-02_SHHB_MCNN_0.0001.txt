import os
from easydict import EasyDict as edict
import time
import torch

# init
__C = edict()
cfg = __C

#------------------------------TRAIN------------------------
__C.SEED = 3035 # random seed,  for reporduction
__C.DATASET = 'SHHB' # dataset selection: SHHA, SHHB, UCF50, UCFQNRF, WE

if __C.DATASET == 'UCF50':# only for UCF50
	from datasets.UCF50.setting import cfg_data
	__C.VAL_INDEX = cfg_data.VAL_INDEX 

if __C.DATASET == 'GCC':# only for GCC
	from datasets.GCC.setting import cfg_data
	__C.VAL_MODE = cfg_data.VAL_MODE 


__C.NET = 'MCNN' # net selection: MCNN, VGG, VGG_DECODER

__C.PRE_GCC = False # use the pretrained model on GCC dataset
__C.PRE_GCC_MODEL = '' # path to model

__C.RESUME = False # contine training
__C.RESUME_PATH = './exp/04-25_09-19_SHHB_VGG_1e-05/latest_state.pth' # 

__C.GPU_ID = [0] # sigle gpu: [0], [1] ...; multi gpus: [0,1]

# learning rate settings
__C.LR = 1e-4 # learning rate
__C.LR_DECAY = 0.99 # decay rate
__C.LR_DECAY_START = 100 # when training epoch is more than it, the learning rate will be begin to decay
__C.NUM_EPOCH_LR_DECAY = 1 # decay frequency
__C.MAX_EPOCH = 200

# print 
__C.PRINT_FREQ = 10

now = time.strftime("%m-%d_%H-%M", time.localtime())

__C.EXP_NAME = now \
			 + '_' + __C.DATASET \
             + '_' + __C.NET \
             + '_' + str(__C.LR)

if __C.DATASET == 'UCF50':
	__C.EXP_NAME += '_' + str(__C.VAL_INDEX)	

if __C.DATASET == 'GCC':
	__C.EXP_NAME += '_' + __C.VAL_MODE	

__C.EXP_PATH = './exp' # the path of logs, checkpoints, and current codes


#------------------------------VAL------------------------
__C.VAL_DENSE_START = 100
__C.VAL_FREQ = 10 # Before __C.VAL_DENSE_START epoches, the freq is set as __C.VAL_FREQ

#------------------------------VIS------------------------
__C.VISIBLE_NUM_IMGS = 1 #  must be 1 for training images with the different sizes



#================================================================================
#================================================================================
#================================================================================  



===============+++++++++++++++===============

all_ep_001_mae_71.69_mse_96.62
    [mae 71.69 mse 96.62], [val loss 0.0139]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_011_mae_48.79_mse_85.27
    [mae 48.79 mse 85.27], [val loss 0.0126]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_061_mae_51.51_mse_84.38
    [mae 51.51 mse 84.38], [val loss 0.0107]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_071_mae_51.23_mse_82.50
    [mae 51.23 mse 82.50], [val loss 0.0105]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_081_mae_50.63_mse_80.69
    [mae 50.63 mse 80.69], [val loss 0.0103]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_091_mae_50.60_mse_80.08
    [mae 50.60 mse 80.08], [val loss 0.0102]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_105_mae_47.75_mse_72.40
    [mae 47.75 mse 72.40], [val loss 0.0102]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_106_mae_37.69_mse_56.41
    [mae 37.69 mse 56.41], [val loss 0.0105]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_108_mae_35.26_mse_53.38
    [mae 35.26 mse 53.38], [val loss 0.0101]
===============+++++++++++++++===============

