import os
from easydict import EasyDict as edict
import time
import torch

# init
__C = edict()
cfg = __C

#------------------------------TRAIN------------------------
__C.SEED = 3035 # random seed,  for reporduction
__C.DATASET = 'SHHB' # dataset selection: SHHA, SHHB, UCF50, UCFQNRF, WE

if __C.DATASET == 'UCF50':# only for UCF50
	from datasets.UCF50.setting import cfg_data
	__C.VAL_INDEX = cfg_data.VAL_INDEX 

if __C.DATASET == 'GCC':# only for GCC
	from datasets.GCC.setting import cfg_data
	__C.VAL_MODE = cfg_data.VAL_MODE 


__C.NET = 'VGG' # net selection: MCNN, VGG, VGG_DECODER

__C.PRE_GCC = False # use the pretrained model on GCC dataset
__C.PRE_GCC_MODEL = '' # path to model

__C.RESUME = False # contine training
__C.RESUME_PATH = './exp/11-25_03-46_SHHB_VGG_1e-05/latest_state.pth' # 

__C.GPU_ID = [0] # sigle gpu: [0], [1] ...; multi gpus: [0,1]

# learning rate settings
__C.LR = 1e-5 # learning rate
__C.LR_DECAY = 0.995 # decay rate
__C.LR_DECAY_START = -1 # when training epoch is more than it, the learning rate will be begin to decay
__C.NUM_EPOCH_LR_DECAY = 1 # decay frequency
__C.MAX_EPOCH = 300

# print 
__C.PRINT_FREQ = 10

now = time.strftime("%m-%d_%H-%M", time.localtime())

__C.EXP_NAME = now \
			 + '_' + __C.DATASET \
             + '_' + __C.NET \
             + '_' + str(__C.LR)

if __C.DATASET == 'UCF50':
	__C.EXP_NAME += '_' + str(__C.VAL_INDEX)	

if __C.DATASET == 'GCC':
	__C.EXP_NAME += '_' + __C.VAL_MODE	

__C.EXP_PATH = './exp' # the path of logs, checkpoints, and current codes


#------------------------------VAL------------------------
__C.VAL_DENSE_START = 50
__C.VAL_FREQ = 5 # Before __C.VAL_DENSE_START epoches, the freq is set as __C.VAL_FREQ

#------------------------------VIS------------------------
__C.VISIBLE_NUM_IMGS = 1 #  must be 1 for training images with the different sizes



#================================================================================
#================================================================================
#================================================================================  



===============+++++++++++++++===============

all_ep_001_mae_32.08_mse_57.68
    [mae 32.08 mse 57.68], [val loss 102.1629]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_006_mae_28.73_mse_41.36
    [mae 28.73 mse 41.36], [val loss 81.6563]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_011_mae_27.70_mse_39.56
    [mae 27.70 mse 39.56], [val loss 78.7423]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_016_mae_22.20_mse_32.14
    [mae 22.20 mse 32.14], [val loss 77.9186]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_021_mae_14.46_mse_24.13
    [mae 14.46 mse 24.13], [val loss 78.1963]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_026_mae_13.97_mse_23.23
    [mae 13.97 mse 23.23], [val loss 77.5523]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_041_mae_12.88_mse_21.74
    [mae 12.88 mse 21.74], [val loss 76.6148]
===============+++++++++++++++===============

