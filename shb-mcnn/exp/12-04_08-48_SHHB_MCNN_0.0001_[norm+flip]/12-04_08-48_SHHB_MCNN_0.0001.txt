import os
from easydict import EasyDict as edict
import time
import torch

# init
__C = edict()
cfg = __C

#------------------------------TRAIN------------------------
__C.SEED = 3035 # random seed,  for reporduction
__C.DATASET = 'SHHB' # dataset selection: SHHA, SHHB, UCF50, UCFQNRF, WE

if __C.DATASET == 'UCF50':# only for UCF50
	from datasets.UCF50.setting import cfg_data
	__C.VAL_INDEX = cfg_data.VAL_INDEX 

if __C.DATASET == 'GCC':# only for GCC
	from datasets.GCC.setting import cfg_data
	__C.VAL_MODE = cfg_data.VAL_MODE 


__C.NET = 'MCNN' # net selection: MCNN, VGG, VGG_DECODER

__C.PRE_GCC = False # use the pretrained model on GCC dataset
__C.PRE_GCC_MODEL = '' # path to model

__C.RESUME = False # contine training
__C.RESUME_PATH = './exp/04-25_09-19_SHHB_VGG_1e-05/latest_state.pth' # 

__C.GPU_ID = [0] # sigle gpu: [0], [1] ...; multi gpus: [0,1]

# learning rate settings
__C.LR = 1e-4 # learning rate
__C.LR_DECAY = 0.995 # decay rate
__C.LR_DECAY_START = -1 # when training epoch is more than it, the learning rate will be begin to decay
__C.NUM_EPOCH_LR_DECAY = 1 # decay frequency
__C.MAX_EPOCH = 1000

# print 
__C.PRINT_FREQ = 10

now = time.strftime("%m-%d_%H-%M", time.localtime())

__C.EXP_NAME = now \
			 + '_' + __C.DATASET \
             + '_' + __C.NET \
             + '_' + str(__C.LR)

if __C.DATASET == 'UCF50':
	__C.EXP_NAME += '_' + str(__C.VAL_INDEX)	

if __C.DATASET == 'GCC':
	__C.EXP_NAME += '_' + __C.VAL_MODE	

__C.EXP_PATH = './exp' # the path of logs, checkpoints, and current codes


#------------------------------VAL------------------------
__C.VAL_DENSE_START = 100
__C.VAL_FREQ = 10 # Before __C.VAL_DENSE_START epoches, the freq is set as __C.VAL_FREQ

#------------------------------VIS------------------------
__C.VISIBLE_NUM_IMGS = 1 #  must be 1 for training images with the different sizes



#================================================================================
#================================================================================
#================================================================================  



===============+++++++++++++++===============

all_ep_001_mae_70.59_mse_107.66
    [mae 70.59 mse 107.66], [val loss 0.0143]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_011_mae_49.56_mse_86.84
    [mae 49.56 mse 86.84], [val loss 0.0121]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_021_mae_53.29_mse_67.06
    [mae 53.29 mse 67.06], [val loss 0.0116]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_031_mae_48.25_mse_62.28
    [mae 48.25 mse 62.28], [val loss 0.0113]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_041_mae_43.50_mse_59.96
    [mae 43.50 mse 59.96], [val loss 0.0109]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_051_mae_38.19_mse_62.84
    [mae 38.19 mse 62.84], [val loss 0.0105]
===============+++++++++++++++===============

