import os
from easydict import EasyDict as edict
import time
import torch

# init
__C = edict()
cfg = __C

#------------------------------TRAIN------------------------
__C.SEED = 3035 # random seed,  for reporduction
__C.DATASET = 'SHHB' # dataset selection: SHHA, SHHB, UCF50, UCFQNRF, WE

if __C.DATASET == 'UCF50':# only for UCF50
	from datasets.UCF50.setting import cfg_data
	__C.VAL_INDEX = cfg_data.VAL_INDEX 

if __C.DATASET == 'GCC':# only for GCC
	from datasets.GCC.setting import cfg_data
	__C.VAL_MODE = cfg_data.VAL_MODE 


__C.NET = 'MCNN' # net selection: MCNN, VGG, VGG_DECODER

__C.PRE_GCC = False # use the pretrained model on GCC dataset
__C.PRE_GCC_MODEL = '' # path to model

__C.RESUME = False # contine training
__C.RESUME_PATH = './exp/04-25_09-19_SHHB_VGG_1e-05/latest_state.pth' # 

__C.GPU_ID = [0] # sigle gpu: [0], [1] ...; multi gpus: [0,1]

# learning rate settings
__C.LR = 1e-4 # learning rate
__C.LR_DECAY = 0.99 # decay rate
__C.LR_DECAY_START = 100 # when training epoch is more than it, the learning rate will be begin to decay
__C.NUM_EPOCH_LR_DECAY = 1 # decay frequency
__C.MAX_EPOCH = 200

# print 
__C.PRINT_FREQ = 10

now = time.strftime("%m-%d_%H-%M", time.localtime())

__C.EXP_NAME = now \
			 + '_' + __C.DATASET \
             + '_' + __C.NET \
             + '_' + str(__C.LR)

if __C.DATASET == 'UCF50':
	__C.EXP_NAME += '_' + str(__C.VAL_INDEX)	

if __C.DATASET == 'GCC':
	__C.EXP_NAME += '_' + __C.VAL_MODE	

__C.EXP_PATH = './exp' # the path of logs, checkpoints, and current codes


#------------------------------VAL------------------------
__C.VAL_DENSE_START = 100
__C.VAL_FREQ = 10 # Before __C.VAL_DENSE_START epoches, the freq is set as __C.VAL_FREQ

#------------------------------VIS------------------------
__C.VISIBLE_NUM_IMGS = 1 #  must be 1 for training images with the different sizes



#================================================================================
#================================================================================
#================================================================================  



===============+++++++++++++++===============

all_ep_001_mae_74.88_mse_117.93
    [mae 74.88 mse 117.93], [val loss 0.0143]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_011_mae_62.47_mse_88.07
    [mae 62.47 mse 88.07], [val loss 0.0129]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_031_mae_49.51_mse_84.40
    [mae 49.51 mse 84.40], [val loss 0.0116]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_101_mae_44.05_mse_76.45
    [mae 44.05 mse 76.45], [val loss 0.0099]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_107_mae_40.68_mse_69.13
    [mae 40.68 mse 69.13], [val loss 0.0097]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_109_mae_38.41_mse_67.93
    [mae 38.41 mse 67.93], [val loss 0.0097]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_115_mae_33.07_mse_59.31
    [mae 33.07 mse 59.31], [val loss 0.0095]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_130_mae_28.89_mse_52.98
    [mae 28.89 mse 52.98], [val loss 0.0093]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_134_mae_27.60_mse_46.47
    [mae 27.60 mse 46.47], [val loss 0.0093]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_179_mae_23.08_mse_38.69
    [mae 23.08 mse 38.69], [val loss 0.0090]
===============+++++++++++++++===============

