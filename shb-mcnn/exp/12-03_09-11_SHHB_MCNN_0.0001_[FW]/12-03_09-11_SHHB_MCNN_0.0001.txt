import os
from easydict import EasyDict as edict
import time
import torch

# init
__C = edict()
cfg = __C

#------------------------------TRAIN------------------------
__C.SEED = 3035 # random seed,  for reporduction
__C.DATASET = 'SHHB' # dataset selection: SHHA, SHHB, UCF50, UCFQNRF, WE

if __C.DATASET == 'UCF50':# only for UCF50
	from datasets.UCF50.setting import cfg_data
	__C.VAL_INDEX = cfg_data.VAL_INDEX 

if __C.DATASET == 'GCC':# only for GCC
	from datasets.GCC.setting import cfg_data
	__C.VAL_MODE = cfg_data.VAL_MODE 


__C.NET = 'MCNN' # net selection: MCNN, VGG, VGG_DECODER

__C.PRE_GCC = False # use the pretrained model on GCC dataset
__C.PRE_GCC_MODEL = '' # path to model

__C.RESUME = False # contine training
__C.RESUME_PATH = './exp/04-25_09-19_SHHB_VGG_1e-05/latest_state.pth' # 

__C.GPU_ID = [0] # sigle gpu: [0], [1] ...; multi gpus: [0,1]

# learning rate settings
__C.LR = 1e-4 # learning rate
__C.LR_DECAY = 0.99 # decay rate
__C.LR_DECAY_START = 100 # when training epoch is more than it, the learning rate will be begin to decay
__C.NUM_EPOCH_LR_DECAY = 1 # decay frequency
__C.MAX_EPOCH = 200

# print 
__C.PRINT_FREQ = 10

now = time.strftime("%m-%d_%H-%M", time.localtime())

__C.EXP_NAME = now \
			 + '_' + __C.DATASET \
             + '_' + __C.NET \
             + '_' + str(__C.LR)

if __C.DATASET == 'UCF50':
	__C.EXP_NAME += '_' + str(__C.VAL_INDEX)	

if __C.DATASET == 'GCC':
	__C.EXP_NAME += '_' + __C.VAL_MODE	

__C.EXP_PATH = './exp' # the path of logs, checkpoints, and current codes


#------------------------------VAL------------------------
__C.VAL_DENSE_START = 100
__C.VAL_FREQ = 10 # Before __C.VAL_DENSE_START epoches, the freq is set as __C.VAL_FREQ

#------------------------------VIS------------------------
__C.VISIBLE_NUM_IMGS = 1 #  must be 1 for training images with the different sizes



#================================================================================
#================================================================================
#================================================================================  



===============+++++++++++++++===============

all_ep_001_mae_74.88_mse_117.92
    [mae 74.88 mse 117.92], [val loss 0.0143]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_011_mae_62.43_mse_88.54
    [mae 62.43 mse 88.54], [val loss 0.0129]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_021_mae_59.42_mse_99.57
    [mae 59.42 mse 99.57], [val loss 0.0124]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_031_mae_49.62_mse_84.65
    [mae 49.62 mse 84.65], [val loss 0.0117]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_071_mae_47.11_mse_81.99
    [mae 47.11 mse 81.99], [val loss 0.0105]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_101_mae_42.13_mse_74.69
    [mae 42.13 mse 74.69], [val loss 0.0099]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_107_mae_34.75_mse_63.39
    [mae 34.75 mse 63.39], [val loss 0.0096]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_115_mae_33.62_mse_59.44
    [mae 33.62 mse 59.44], [val loss 0.0095]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_130_mae_27.86_mse_50.76
    [mae 27.86 mse 50.76], [val loss 0.0093]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_134_mae_27.69_mse_47.35
    [mae 27.69 mse 47.35], [val loss 0.0093]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_179_mae_22.99_mse_38.61
    [mae 22.99 mse 38.61], [val loss 0.0090]
===============+++++++++++++++===============

