import os
from easydict import EasyDict as edict
import time
import torch

# init
__C = edict()
cfg = __C

#------------------------------TRAIN------------------------
__C.SEED = 3035 # random seed,  for reporduction
__C.DATASET = 'SHHB' # dataset selection: SHHA, SHHB, UCF50, UCFQNRF, WE

if __C.DATASET == 'UCF50':# only for UCF50
	from datasets.UCF50.setting import cfg_data
	__C.VAL_INDEX = cfg_data.VAL_INDEX 

if __C.DATASET == 'GCC':# only for GCC
	from datasets.GCC.setting import cfg_data
	__C.VAL_MODE = cfg_data.VAL_MODE 


__C.NET = 'VGG' # net selection: MCNN, VGG, VGG_DECODER

__C.PRE_GCC = False # use the pretrained model on GCC dataset
__C.PRE_GCC_MODEL = '' # path to model

__C.RESUME = False # contine training
__C.RESUME_PATH = './exp/11-25_03-46_SHHB_VGG_1e-05/latest_state.pth' # 

__C.GPU_ID = [0] # sigle gpu: [0], [1] ...; multi gpus: [0,1]

# learning rate settings
__C.LR = 1e-5 # learning rate
__C.LR_DECAY = 0.995 # decay rate
__C.LR_DECAY_START = -1 # when training epoch is more than it, the learning rate will be begin to decay
__C.NUM_EPOCH_LR_DECAY = 1 # decay frequency
__C.MAX_EPOCH = 600

# print 
__C.PRINT_FREQ = 10

now = time.strftime("%m-%d_%H-%M", time.localtime())

__C.EXP_NAME = now \
			 + '_' + __C.DATASET \
             + '_' + __C.NET \
             + '_' + str(__C.LR)

if __C.DATASET == 'UCF50':
	__C.EXP_NAME += '_' + str(__C.VAL_INDEX)	

if __C.DATASET == 'GCC':
	__C.EXP_NAME += '_' + __C.VAL_MODE	

__C.EXP_PATH = './exp' # the path of logs, checkpoints, and current codes


#------------------------------VAL------------------------
__C.VAL_DENSE_START = 50
__C.VAL_FREQ = 5 # Before __C.VAL_DENSE_START epoches, the freq is set as __C.VAL_FREQ

#------------------------------VIS------------------------
__C.VISIBLE_NUM_IMGS = 1 #  must be 1 for training images with the different sizes



#================================================================================
#================================================================================
#================================================================================  



===============+++++++++++++++===============

all_ep_001_mae_62.67_mse_95.42
    [mae 62.67 mse 95.42], [val loss 113.4250]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_006_mae_39.41_mse_60.30
    [mae 39.41 mse 60.30], [val loss 90.6838]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_011_mae_28.39_mse_45.97
    [mae 28.39 mse 45.97], [val loss 84.2877]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_016_mae_22.84_mse_37.84
    [mae 22.84 mse 37.84], [val loss 81.5636]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_046_mae_14.27_mse_23.91
    [mae 14.27 mse 23.91], [val loss 76.1298]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_063_mae_14.02_mse_24.15
    [mae 14.02 mse 24.15], [val loss 74.9369]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_067_mae_14.15_mse_23.75
    [mae 14.15 mse 23.75], [val loss 74.0322]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_095_mae_12.89_mse_23.24
    [mae 12.89 mse 23.24], [val loss 72.8253]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_098_mae_12.45_mse_21.69
    [mae 12.45 mse 21.69], [val loss 73.8251]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_176_mae_11.55_mse_21.11
    [mae 11.55 mse 21.11], [val loss 72.3117]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_195_mae_11.03_mse_20.27
    [mae 11.03 mse 20.27], [val loss 72.4549]
===============+++++++++++++++===============

